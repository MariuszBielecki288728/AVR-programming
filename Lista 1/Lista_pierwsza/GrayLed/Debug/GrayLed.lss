
GrayLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c4  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d1  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
}

int main(void)
{
	//setup
	DDRB = 0b00001111; // 4 * LED 
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	84 b9       	out	0x04, r24	; 4
#include <avr/io.h>
#include <util/delay.h>


void display(int8 num){
	PORTB = num;
  84:	15 b8       	out	0x05, r1	; 5
	//setup
	DDRB = 0b00001111; // 4 * LED 
	
	int8 num = 0;
	display(0);
    int8 flag_button = 0; // 0 - default, 1 - NEXT, 2 - PREV, 3 - RESET
  86:	90 e0       	ldi	r25, 0x00	; 0
int main(void)
{
	//setup
	DDRB = 0b00001111; // 4 * LED 
	
	int8 num = 0;
  88:	20 e0       	ldi	r18, 0x00	; 0
				case 3:
					num = 0;
					display(0);
					break;
			}
		flag_button = 0;
  8a:	30 e0       	ldi	r19, 0x00	; 0
		if (PINC){
			_delay_ms(20);
			
			//NEXT
			if(PINC & NEXT) {
				flag_button = 1;
  8c:	41 e0       	ldi	r20, 0x01	; 1
			}
			//PREV
			else if(PINC & PREV) {
				flag_button = 2;
  8e:	52 e0       	ldi	r21, 0x02	; 2
			}
			//RESET
			else if(PINC & RESET) {
				flag_button = 3;
  90:	63 e0       	ldi	r22, 0x03	; 3
  92:	01 c0       	rjmp	.+2      	; 0x96 <main+0x16>
				case 3:
					num = 0;
					display(0);
					break;
			}
		flag_button = 0;
  94:	93 2f       	mov	r25, r19
	int8 num = 0;
	display(0);
    int8 flag_button = 0; // 0 - default, 1 - NEXT, 2 - PREV, 3 - RESET
	while (1) 
    {
		if (PINC){
  96:	86 b1       	in	r24, 0x06	; 6
  98:	88 23       	and	r24, r24
  9a:	61 f0       	breq	.+24     	; 0xb4 <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	e7 e8       	ldi	r30, 0x87	; 135
  9e:	f3 e1       	ldi	r31, 0x13	; 19
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x20>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
			_delay_ms(20);
			
			//NEXT
			if(PINC & NEXT) {
  a8:	32 99       	sbic	0x06, 2	; 6
  aa:	29 c0       	rjmp	.+82     	; 0xfe <main+0x7e>
				flag_button = 1;
			}
			//PREV
			else if(PINC & PREV) {
  ac:	31 99       	sbic	0x06, 1	; 6
  ae:	29 c0       	rjmp	.+82     	; 0x102 <main+0x82>
				flag_button = 2;
			}
			//RESET
			else if(PINC & RESET) {
  b0:	30 99       	sbic	0x06, 0	; 6
  b2:	29 c0       	rjmp	.+82     	; 0x106 <main+0x86>
				flag_button = 3;
			}
		}
	if (flag_button){
  b4:	99 23       	and	r25, r25
  b6:	79 f3       	breq	.-34     	; 0x96 <main+0x16>
		if (PINC == 0){
  b8:	86 b1       	in	r24, 0x06	; 6
  ba:	81 11       	cpse	r24, r1
  bc:	ec cf       	rjmp	.-40     	; 0x96 <main+0x16>
			switch(flag_button){
  be:	92 30       	cpi	r25, 0x02	; 2
  c0:	79 f0       	breq	.+30     	; 0xe0 <main+0x60>
  c2:	93 30       	cpi	r25, 0x03	; 3
  c4:	c1 f0       	breq	.+48     	; 0xf6 <main+0x76>
  c6:	91 30       	cpi	r25, 0x01	; 1
  c8:	29 f7       	brne	.-54     	; 0x94 <main+0x14>
				case 1:
					if (num == 15){
  ca:	2f 30       	cpi	r18, 0x0F	; 15
  cc:	11 f0       	breq	.+4      	; 0xd2 <main+0x52>
						num = 0;
					}
					else{
						num++;
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <main+0x54>
	if (flag_button){
		if (PINC == 0){
			switch(flag_button){
				case 1:
					if (num == 15){
						num = 0;
  d2:	20 e0       	ldi	r18, 0x00	; 0
					}
					else{
						num++;
					}					
					display(num ^ (num >> 1));					
  d4:	82 2f       	mov	r24, r18
  d6:	86 95       	lsr	r24
  d8:	82 27       	eor	r24, r18
#include <avr/io.h>
#include <util/delay.h>


void display(int8 num){
	PORTB = num;
  da:	85 b9       	out	0x05, r24	; 5
				case 3:
					num = 0;
					display(0);
					break;
			}
		flag_button = 0;
  dc:	93 2f       	mov	r25, r19
  de:	db cf       	rjmp	.-74     	; 0x96 <main+0x16>
						num++;
					}					
					display(num ^ (num >> 1));					
					break;
				case 2:
					if (num == 0){
  e0:	22 23       	and	r18, r18
  e2:	11 f0       	breq	.+4      	; 0xe8 <main+0x68>
						num = 15;
					}
					else{
						num--;
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x6a>
					}					
					display(num ^ (num >> 1));					
					break;
				case 2:
					if (num == 0){
						num = 15;
  e8:	2f e0       	ldi	r18, 0x0F	; 15
					}
					else{
						num--;
					}					
					display(num ^ (num >> 1));					
  ea:	82 2f       	mov	r24, r18
  ec:	86 95       	lsr	r24
  ee:	82 27       	eor	r24, r18
#include <avr/io.h>
#include <util/delay.h>


void display(int8 num){
	PORTB = num;
  f0:	85 b9       	out	0x05, r24	; 5
				case 3:
					num = 0;
					display(0);
					break;
			}
		flag_button = 0;
  f2:	93 2f       	mov	r25, r19
  f4:	d0 cf       	rjmp	.-96     	; 0x96 <main+0x16>
#include <avr/io.h>
#include <util/delay.h>


void display(int8 num){
	PORTB = num;
  f6:	15 b8       	out	0x05, r1	; 5
				case 3:
					num = 0;
					display(0);
					break;
			}
		flag_button = 0;
  f8:	93 2f       	mov	r25, r19
						num--;
					}					
					display(num ^ (num >> 1));					
					break;
				case 3:
					num = 0;
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	cc cf       	rjmp	.-104    	; 0x96 <main+0x16>
		if (PINC){
			_delay_ms(20);
			
			//NEXT
			if(PINC & NEXT) {
				flag_button = 1;
  fe:	94 2f       	mov	r25, r20
 100:	db cf       	rjmp	.-74     	; 0xb8 <main+0x38>
			}
			//PREV
			else if(PINC & PREV) {
				flag_button = 2;
 102:	95 2f       	mov	r25, r21
 104:	d9 cf       	rjmp	.-78     	; 0xb8 <main+0x38>
			}
			//RESET
			else if(PINC & RESET) {
				flag_button = 3;
 106:	96 2f       	mov	r25, r22
 108:	d7 cf       	rjmp	.-82     	; 0xb8 <main+0x38>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
