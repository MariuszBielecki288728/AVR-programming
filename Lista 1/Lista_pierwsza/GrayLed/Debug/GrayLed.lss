
GrayLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000740  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000683  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
}

int main(void)
{
	//setup
	DDRB = 0b00001111;
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	84 b9       	out	0x04, r24	; 4
#include <avr/io.h>
#include <util/delay.h>


void display(int8 num){
	PORTB = num;
  84:	15 b8       	out	0x05, r1	; 5
	//setup
	DDRB = 0b00001111;
	
	int8 num = 0;
	display(0);
    int8 flag_button = 0; // 0 - default, 1 - NEXT, 2 - PREV, 3 - RESET
  86:	90 e0       	ldi	r25, 0x00	; 0
int main(void)
{
	//setup
	DDRB = 0b00001111;
	
	int8 num = 0;
  88:	20 e0       	ldi	r18, 0x00	; 0
				case 3:
					num = 0;
					display(num ^ (num >> 1));
					break;
			}
		flag_button = 0;
  8a:	40 e0       	ldi	r20, 0x00	; 0
    {
		if (PINC){
			//_delay_ms(20);
			//NEXT
			if((PINC & NEXT) == NEXT) {
				flag_button = 1;
  8c:	31 e0       	ldi	r19, 0x01	; 1
			}
			//PREV
			else if((PINC & PREV) == PREV) {
				flag_button = 2;
  8e:	52 e0       	ldi	r21, 0x02	; 2
			}
			//RESET
			else if((PINC & RESET) == RESET) {
				flag_button = 3;
  90:	63 e0       	ldi	r22, 0x03	; 3
  92:	01 c0       	rjmp	.+2      	; 0x96 <main+0x16>
				case 3:
					num = 0;
					display(num ^ (num >> 1));
					break;
			}
		flag_button = 0;
  94:	94 2f       	mov	r25, r20
	int8 num = 0;
	display(0);
    int8 flag_button = 0; // 0 - default, 1 - NEXT, 2 - PREV, 3 - RESET
	while (1) 
    {
		if (PINC){
  96:	86 b1       	in	r24, 0x06	; 6
  98:	88 23       	and	r24, r24
  9a:	31 f0       	breq	.+12     	; 0xa8 <main+0x28>
			//_delay_ms(20);
			//NEXT
			if((PINC & NEXT) == NEXT) {
  9c:	32 99       	sbic	0x06, 2	; 6
  9e:	29 c0       	rjmp	.+82     	; 0xf2 <main+0x72>
				flag_button = 1;
			}
			//PREV
			else if((PINC & PREV) == PREV) {
  a0:	31 99       	sbic	0x06, 1	; 6
  a2:	29 c0       	rjmp	.+82     	; 0xf6 <main+0x76>
				flag_button = 2;
			}
			//RESET
			else if((PINC & RESET) == RESET) {
  a4:	30 99       	sbic	0x06, 0	; 6
  a6:	29 c0       	rjmp	.+82     	; 0xfa <main+0x7a>
				flag_button = 3;
			}
		}
	if (flag_button){
  a8:	99 23       	and	r25, r25
  aa:	a9 f3       	breq	.-22     	; 0x96 <main+0x16>
		if (PINC == 0){
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	81 11       	cpse	r24, r1
  b0:	f2 cf       	rjmp	.-28     	; 0x96 <main+0x16>
			switch(flag_button){
  b2:	92 30       	cpi	r25, 0x02	; 2
  b4:	79 f0       	breq	.+30     	; 0xd4 <main+0x54>
  b6:	93 30       	cpi	r25, 0x03	; 3
  b8:	c1 f0       	breq	.+48     	; 0xea <main+0x6a>
  ba:	91 30       	cpi	r25, 0x01	; 1
  bc:	59 f7       	brne	.-42     	; 0x94 <main+0x14>
				case 1:
					if (num == 15){
  be:	2f 30       	cpi	r18, 0x0F	; 15
  c0:	11 f0       	breq	.+4      	; 0xc6 <main+0x46>
						num = 0;
					}
					else{
						num++;
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <main+0x48>
	if (flag_button){
		if (PINC == 0){
			switch(flag_button){
				case 1:
					if (num == 15){
						num = 0;
  c6:	20 e0       	ldi	r18, 0x00	; 0
					}
					else{
						num++;
					}
					
					display(num ^ (num >> 1));
  c8:	82 2f       	mov	r24, r18
  ca:	86 95       	lsr	r24
  cc:	82 27       	eor	r24, r18
#include <avr/io.h>
#include <util/delay.h>


void display(int8 num){
	PORTB = num;
  ce:	85 b9       	out	0x05, r24	; 5
				case 3:
					num = 0;
					display(num ^ (num >> 1));
					break;
			}
		flag_button = 0;
  d0:	94 2f       	mov	r25, r20
  d2:	e1 cf       	rjmp	.-62     	; 0x96 <main+0x16>
					
					display(num ^ (num >> 1));
					
					break;
				case 2:
					if (num == 0){
  d4:	22 23       	and	r18, r18
  d6:	11 f0       	breq	.+4      	; 0xdc <main+0x5c>
						num = 15;
					}
					else{
						num--;
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <main+0x5e>
					display(num ^ (num >> 1));
					
					break;
				case 2:
					if (num == 0){
						num = 15;
  dc:	2f e0       	ldi	r18, 0x0F	; 15
					}
					else{
						num--;
					}
					
					display(num ^ (num >> 1));
  de:	82 2f       	mov	r24, r18
  e0:	86 95       	lsr	r24
  e2:	82 27       	eor	r24, r18
#include <avr/io.h>
#include <util/delay.h>


void display(int8 num){
	PORTB = num;
  e4:	85 b9       	out	0x05, r24	; 5
				case 3:
					num = 0;
					display(num ^ (num >> 1));
					break;
			}
		flag_button = 0;
  e6:	94 2f       	mov	r25, r20
  e8:	d6 cf       	rjmp	.-84     	; 0x96 <main+0x16>
#include <avr/io.h>
#include <util/delay.h>


void display(int8 num){
	PORTB = num;
  ea:	15 b8       	out	0x05, r1	; 5
				case 3:
					num = 0;
					display(num ^ (num >> 1));
					break;
			}
		flag_button = 0;
  ec:	94 2f       	mov	r25, r20
					
					display(num ^ (num >> 1));
					
					break;
				case 3:
					num = 0;
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	d2 cf       	rjmp	.-92     	; 0x96 <main+0x16>
    {
		if (PINC){
			//_delay_ms(20);
			//NEXT
			if((PINC & NEXT) == NEXT) {
				flag_button = 1;
  f2:	93 2f       	mov	r25, r19
  f4:	db cf       	rjmp	.-74     	; 0xac <main+0x2c>
			}
			//PREV
			else if((PINC & PREV) == PREV) {
				flag_button = 2;
  f6:	95 2f       	mov	r25, r21
  f8:	d9 cf       	rjmp	.-78     	; 0xac <main+0x2c>
			}
			//RESET
			else if((PINC & RESET) == RESET) {
				flag_button = 3;
  fa:	96 2f       	mov	r25, r22
  fc:	d7 cf       	rjmp	.-82     	; 0xac <main+0x2c>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
