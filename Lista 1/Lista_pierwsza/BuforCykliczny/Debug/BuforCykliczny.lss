
BuforCykliczny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b3  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a8  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d3  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  000016a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define int8 uint8_t
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	c4 56       	subi	r28, 0x64	; 100
  8a:	d1 09       	sbc	r29, r1
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	//port setup
	DDRC = 0b00000010;
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	87 b9       	out	0x07, r24	; 7
	//PC0 - input - button
	//PC1 - output -LED
	
	//bufor setup
	int8 bufor[100];
	memset(bufor, 0, sizeof(int8)*100);
  9a:	fe 01       	movw	r30, r28
  9c:	31 96       	adiw	r30, 0x01	; 1
  9e:	84 e6       	ldi	r24, 0x64	; 100
  a0:	df 01       	movw	r26, r30
  a2:	1d 92       	st	X+, r1
  a4:	8a 95       	dec	r24
  a6:	e9 f7       	brne	.-6      	; 0xa2 <main+0x22>
   	int8 index = 0;
	
    while (1) 
    {
		PORTC = 0b00000000;
  a8:	18 b8       	out	0x08, r1	; 8
	//PC1 - output -LED
	
	//bufor setup
	int8 bufor[100];
	memset(bufor, 0, sizeof(int8)*100);
   	int8 index = 0;
  aa:	80 e0       	ldi	r24, 0x00	; 0
		PORTC = 0b00000000;
		if (index == 100){
			index = 0;
		}
		if (bufor[index]){
			PORTC = 0b00000010;
  ac:	52 e0       	ldi	r21, 0x02	; 2
			bufor[index] = 0;
		}
		if (PINC == 0b00000000){
			bufor[index] = 1;
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <main+0x34>
	
    while (1) 
    {
		PORTC = 0b00000000;
		if (index == 100){
			index = 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
		}
		if (bufor[index]){
  b4:	28 2f       	mov	r18, r24
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	e1 e0       	ldi	r30, 0x01	; 1
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ec 0f       	add	r30, r28
  be:	fd 1f       	adc	r31, r29
  c0:	e2 0f       	add	r30, r18
  c2:	f3 1f       	adc	r31, r19
  c4:	90 81       	ld	r25, Z
  c6:	99 23       	and	r25, r25
  c8:	41 f0       	breq	.+16     	; 0xda <main+0x5a>
			PORTC = 0b00000010;
  ca:	58 b9       	out	0x08, r21	; 8
			bufor[index] = 0;
  cc:	e1 e0       	ldi	r30, 0x01	; 1
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ec 0f       	add	r30, r28
  d2:	fd 1f       	adc	r31, r29
  d4:	e2 0f       	add	r30, r18
  d6:	f3 1f       	adc	r31, r19
  d8:	10 82       	st	Z, r1
		}
		if (PINC == 0b00000000){
  da:	96 b1       	in	r25, 0x06	; 6
  dc:	91 11       	cpse	r25, r1
  de:	07 c0       	rjmp	.+14     	; 0xee <main+0x6e>
			bufor[index] = 1;
  e0:	e1 e0       	ldi	r30, 0x01	; 1
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ec 0f       	add	r30, r28
  e6:	fd 1f       	adc	r31, r29
  e8:	e2 0f       	add	r30, r18
  ea:	f3 1f       	adc	r31, r19
  ec:	40 83       	st	Z, r20
		}
		index++;
  ee:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	e3 ec       	ldi	r30, 0xC3	; 195
  f2:	f9 e0       	ldi	r31, 0x09	; 9
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x74>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x7a>
  fa:	00 00       	nop
	memset(bufor, 0, sizeof(int8)*100);
   	int8 index = 0;
	
    while (1) 
    {
		PORTC = 0b00000000;
  fc:	18 b8       	out	0x08, r1	; 8
		if (index == 100){
  fe:	84 36       	cpi	r24, 0x64	; 100
 100:	c9 f6       	brne	.-78     	; 0xb4 <main+0x34>
 102:	d7 cf       	rjmp	.-82     	; 0xb2 <main+0x32>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
